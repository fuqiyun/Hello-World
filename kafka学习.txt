kafka核心角色
生产者、消费者、broker、zookeeper

broker由下面几个角色来组成
topic（表名） 、 partition （分表存数据）、replication（对partition进行备份，分配到所有broker上）、 Leader&Follower





zookeeper日志文件存在
D:\tool\zookeeper\apache-zookeeper-3.8.4-bin\conf\zoo.cfg


# 启动
.\bin\windows\kafka-server-start.bat  .\config\server.properties


#  创建主体
.\d:\kafka_2.12-3.9.1\bin\windows\kafka-topics.bat --create --bootstrap-server localhost:9092 --topic test-topic --partitions 3 --replication-factor 1


# 查看所有 topic
.\bin\windows\kafka-topics.bat --list --bootstrap-server localhost:9092

# 查看指定 topic 详情
.\bin\windows\kafka-topics.bat --describe --bootstrap-server localhost:9092 --topic test-topic

# 存储value
.\kafka-topics.bat --create --bootstrap-server localhost:9092   --topic test-topic


# 存储key-value，冒号分割
.\kafka-console-producer.bat --bootstrap-server localhost:9092 --topic test-topic --property "parse.key=true" --property "key.separator=:"

# 生产者
.\kafka-console-producer.bat --broker-list localhost:9092 --topic test-topic

# 消费者
.\kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic test-topic --from-beginning



 

 Partition: 0  Leader: 1  Replicas: 1  Isr: 1

 翻译：
Replicas: 1 表示分区 0 的副本存储在 broker 1
Leader: 1 表示 broker 1 是该分区的 Leader
Isr: 1 表示同步副本仅为 broker 1




知识点：
在同一个消费者组内，消息只会被消费一次（但由组内的一个消费者处理）
1、kafka消费者组的核心机制
 消费者组的作用：一个消费者订阅一个主题（Topic），组内所有消费者共同消费该主题的信息。组会跟踪偏移量（offset） ，确保每条消息在组内只被处理一次。
 分区（partition）匹配：Kafka主题被分为多个分区。组内多个消费者会自动分配这些分区（Rebalance）。每个分区只分配给组内的一个消费者。 
示例：如果主题有三个分区，组内有两个消费者：
消费者A肯呢个分配带分区0和1
消费者B分配到分区2
落在分区1的消息只会被消费者A处理，不会发送给B 

2、kafka有key和无key消息是怎么分区的
有key
    如果有key，kafka计算key的哈希值（使用Murmur算法）没然后取模分区数：partition = utils.abs(utils.murmur2(keyBytes)) % numPartitions
    相同key的消息总是分配到同一个分区，保证了这些消息在分区内的顺序
无key
    如果没有消息key，kafka使用轮询策略：消息依次分配到可用分区（基于生产者内部的批次）。
    具体：在生产者缓冲区（Batch）中，消息会轮询所有分区，确保均匀分布。



Linux启动kafka必须加
# 添加这个（必须，用于外部客户端连接您的公网 IP）
advertised.listeners=PLAINTEXT://123.56.90.53:9092






#todo
listeners=PLAINTEXT://:9092
# 添加这个（必须，用于外部客户端连接您的公网 IP）
advertised.listeners=PLAINTEXT://123.56.90.53:9092

