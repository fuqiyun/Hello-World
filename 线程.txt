1、ThreadPoolExecutor  getPoolSize  getActiveCount方法的区别？
getPoolSize
(1)、这个方法是返回线程池中当前的线程数量
(2)、这个值表示线程池中可用的最大线程数，即使有些线程可能当前是空闲的、
2、getActiveCount()
(1)、这个方法返回线程池中当前正在执行任务的线程数量
(2)、这意味着，如果有线程正在执行任务（即，他们没有空闲，并且正在处理任务），那么这些线程的数量就是
getActiveCount的返回值
(3)、这个值通常小于或等于getPoolSize(),因为不是所有的线程都会同时处于活动状态

区别：
1、getPoolSize是线程池的总线程数，无论这些线程是否正在执行任务
注意：getPoolSize方法返回的是线程池中的线程总数，这包括了核心线程数和非核心线程数。核心线程是线程池创建时立即启动的线程，
他们会一直存在于线程中，即使它们当前是空闲的。非核心线程则是当任务队列已满，并且当前线程小于最大
线程数时才会创建的线程。
当核心线程处理完任务之后，他们并不会立刻从线程池移除。相反，核心线程会保持在线程池中，等待新的任务到来。
这是因为核心线程是线程池的基本组成部分，它们的存在是为了确保线程池能够快速地响应新提交的任务。
因此，getPoolSize方法会计算核心线程的数量，并且当核心线程处理完任务之后，他们仍然会被计算在内，除非
线程池被关闭或者核心线程超时设置被启用。
2、getActiveCount  是当前正在执行任务的线程数，他表示了线程池的实际使用情况



线程池使用方法
@Override
    public void recordHandleImport(String day) {
        //自定义线程池
        ExecutorService executor = new ThreadPoolExecutor(4, 4,
                10L, TimeUnit.SECONDS,
                new LinkedBlockingQueue<Runnable>(),
                new ThreadFactoryBuilder().setNameFormat("高可用改造专用线程池-%d").build());


        try {
            //强制路由 分片规则
            BillRecordPointInsertTask pointInsertTask = new BillRecordPointInsertTask(importDataTaskLogic, importDataStepLogic,
                    day, this);
            executor.execute(pointInsertTask);
        } catch (Exception e) {
            logger.error("导入数据 import_x_x 线程池发生错误", e);
        }
        executor.shutdown();
        try {
            while (!executor.isTerminated()) {
                if (executor.awaitTermination(5, TimeUnit.SECONDS)) {
                    logger.info("recordHandleImport thread pool close successfully");
                } else {
                    logger.info("Waiting recordHandleImport thread pool close...");
                }
            }
        } catch (InterruptedException e) {
            logger.error("线程池异常", e);
            executor.shutdownNow();
            Thread.currentThread().interrupt();
        } catch (Exception ex) {
            ex.printStackTrace();
            executor.shutdownNow();
        }

    }